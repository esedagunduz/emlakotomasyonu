{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hover = hover;\nexports.unhover = unhover;\nvar _dom = require(\"@testing-library/dom\");\nvar _utils = require(\"./utils\");\n\n// includes `element`\nfunction getParentElements(element) {\n  const parentElements = [element];\n  let currentElement = element;\n  while ((currentElement = currentElement.parentElement) != null) {\n    parentElements.push(currentElement);\n  }\n  return parentElements;\n}\nfunction hover(element, init, {\n  skipPointerEventsCheck = false\n} = {}) {\n  if (!skipPointerEventsCheck && !(0, _utils.hasPointerEvents)(element)) {\n    throw new Error('unable to hover element as it has or inherits pointer-events set to \"none\".');\n  }\n  if ((0, _utils.isLabelWithInternallyDisabledControl)(element)) return;\n  const parentElements = getParentElements(element).reverse();\n  _dom.fireEvent.pointerOver(element, init);\n  for (const el of parentElements) {\n    _dom.fireEvent.pointerEnter(el, init);\n  }\n  if (!(0, _utils.isDisabled)(element)) {\n    _dom.fireEvent.mouseOver(element, (0, _utils.getMouseEventOptions)('mouseover', init));\n    for (const el of parentElements) {\n      _dom.fireEvent.mouseEnter(el, (0, _utils.getMouseEventOptions)('mouseenter', init));\n    }\n  }\n  _dom.fireEvent.pointerMove(element, init);\n  if (!(0, _utils.isDisabled)(element)) {\n    _dom.fireEvent.mouseMove(element, (0, _utils.getMouseEventOptions)('mousemove', init));\n  }\n}\nfunction unhover(element, init, {\n  skipPointerEventsCheck = false\n} = {}) {\n  if (!skipPointerEventsCheck && !(0, _utils.hasPointerEvents)(element)) {\n    throw new Error('unable to unhover element as it has or inherits pointer-events set to \"none\".');\n  }\n  if ((0, _utils.isLabelWithInternallyDisabledControl)(element)) return;\n  const parentElements = getParentElements(element);\n  _dom.fireEvent.pointerMove(element, init);\n  if (!(0, _utils.isDisabled)(element)) {\n    _dom.fireEvent.mouseMove(element, (0, _utils.getMouseEventOptions)('mousemove', init));\n  }\n  _dom.fireEvent.pointerOut(element, init);\n  for (const el of parentElements) {\n    _dom.fireEvent.pointerLeave(el, init);\n  }\n  if (!(0, _utils.isDisabled)(element)) {\n    _dom.fireEvent.mouseOut(element, (0, _utils.getMouseEventOptions)('mouseout', init));\n    for (const el of parentElements) {\n      _dom.fireEvent.mouseLeave(el, (0, _utils.getMouseEventOptions)('mouseleave', init));\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}