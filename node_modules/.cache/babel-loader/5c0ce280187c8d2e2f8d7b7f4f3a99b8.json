{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.click = click;\nexports.dblClick = dblClick;\nvar _dom = require(\"@testing-library/dom\");\nvar _utils = require(\"./utils\");\nvar _hover = require(\"./hover\");\nvar _blur = require(\"./blur\");\nvar _focus = require(\"./focus\");\nfunction getPreviouslyFocusedElement(element) {\n  const focusedElement = element.ownerDocument.activeElement;\n  const wasAnotherElementFocused = focusedElement && focusedElement !== element.ownerDocument.body && focusedElement !== element;\n  return wasAnotherElementFocused ? focusedElement : null;\n}\nfunction clickLabel(label, init, {\n  clickCount\n}) {\n  if ((0, _utils.isLabelWithInternallyDisabledControl)(label)) return;\n  _dom.fireEvent.pointerDown(label, init);\n  _dom.fireEvent.mouseDown(label, (0, _utils.getMouseEventOptions)('mousedown', init, clickCount));\n  _dom.fireEvent.pointerUp(label, init);\n  _dom.fireEvent.mouseUp(label, (0, _utils.getMouseEventOptions)('mouseup', init, clickCount));\n  fireClick(label, (0, _utils.getMouseEventOptions)('click', init, clickCount)); // clicking the label will trigger a click of the label.control\n  // however, it will not focus the label.control so we have to do it\n  // ourselves.\n\n  if (label.control) (0, _focus.focus)(label.control);\n}\nfunction clickBooleanElement(element, init, {\n  clickCount\n}) {\n  _dom.fireEvent.pointerDown(element, init);\n  if (!element.disabled) {\n    _dom.fireEvent.mouseDown(element, (0, _utils.getMouseEventOptions)('mousedown', init, clickCount));\n  }\n  (0, _focus.focus)(element);\n  _dom.fireEvent.pointerUp(element, init);\n  if (!element.disabled) {\n    _dom.fireEvent.mouseUp(element, (0, _utils.getMouseEventOptions)('mouseup', init, clickCount));\n    fireClick(element, (0, _utils.getMouseEventOptions)('click', init, clickCount));\n  }\n}\nfunction clickElement(element, init, {\n  clickCount\n}) {\n  const previousElement = getPreviouslyFocusedElement(element);\n  _dom.fireEvent.pointerDown(element, init);\n  if (!(0, _utils.isDisabled)(element)) {\n    const continueDefaultHandling = _dom.fireEvent.mouseDown(element, (0, _utils.getMouseEventOptions)('mousedown', init, clickCount));\n    if (continueDefaultHandling) {\n      const closestFocusable = findClosest(element, _utils.isFocusable);\n      if (previousElement && !closestFocusable) {\n        (0, _blur.blur)(previousElement);\n      } else if (closestFocusable) {\n        (0, _focus.focus)(closestFocusable);\n      }\n    }\n  }\n  _dom.fireEvent.pointerUp(element, init);\n  if (!(0, _utils.isDisabled)(element)) {\n    _dom.fireEvent.mouseUp(element, (0, _utils.getMouseEventOptions)('mouseup', init, clickCount));\n    fireClick(element, (0, _utils.getMouseEventOptions)('click', init, clickCount));\n    const parentLabel = element.closest('label');\n    if (parentLabel != null && parentLabel.control) (0, _focus.focus)(parentLabel.control);\n  }\n}\nfunction findClosest(element, callback) {\n  let el = element;\n  do {\n    if (callback(el)) {\n      return el;\n    }\n    el = el.parentElement;\n  } while (el && el !== element.ownerDocument.body);\n  return undefined;\n}\nfunction click(element, init, {\n  skipHover = false,\n  clickCount = 0,\n  skipPointerEventsCheck = false\n} = {}) {\n  if (!skipPointerEventsCheck && !(0, _utils.hasPointerEvents)(element)) {\n    throw new Error('unable to click element as it has or inherits pointer-events set to \"none\".');\n  } // We just checked for `pointerEvents`. We can always skip this one in `hover`.\n\n  if (!skipHover) (0, _hover.hover)(element, init, {\n    skipPointerEventsCheck: true\n  });\n  if ((0, _utils.isElementType)(element, 'label')) {\n    clickLabel(element, init, {\n      clickCount\n    });\n  } else if ((0, _utils.isElementType)(element, 'input')) {\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      clickBooleanElement(element, init, {\n        clickCount\n      });\n    } else {\n      clickElement(element, init, {\n        clickCount\n      });\n    }\n  } else {\n    clickElement(element, init, {\n      clickCount\n    });\n  }\n}\nfunction fireClick(element, mouseEventOptions) {\n  if (mouseEventOptions.button === 2) {\n    _dom.fireEvent.contextMenu(element, mouseEventOptions);\n  } else {\n    _dom.fireEvent.click(element, mouseEventOptions);\n  }\n}\nfunction dblClick(element, init, {\n  skipPointerEventsCheck = false\n} = {}) {\n  if (!skipPointerEventsCheck && !(0, _utils.hasPointerEvents)(element)) {\n    throw new Error('unable to double-click element as it has or inherits pointer-events set to \"none\".');\n  }\n  (0, _hover.hover)(element, init, {\n    skipPointerEventsCheck\n  });\n  click(element, init, {\n    skipHover: true,\n    clickCount: 0,\n    skipPointerEventsCheck\n  });\n  click(element, init, {\n    skipHover: true,\n    clickCount: 1,\n    skipPointerEventsCheck\n  });\n  _dom.fireEvent.dblClick(element, (0, _utils.getMouseEventOptions)('dblclick', init, 2));\n}","map":null,"metadata":{},"sourceType":"script"}