{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyboardImplementation = keyboardImplementation;\nexports.releaseAllKeys = releaseAllKeys;\nvar _dom = require(\"@testing-library/dom\");\nvar _utils = require(\"../utils\");\nvar _getNextKeyDef = require(\"./getNextKeyDef\");\nvar plugins = _interopRequireWildcard(require(\"./plugins\"));\nvar _getEventProps = require(\"./getEventProps\");\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nasync function keyboardImplementation(text, options, state) {\n  var _state$repeatKey;\n  const {\n    document\n  } = options;\n  const getCurrentElement = () => getActive(document);\n  const {\n    keyDef,\n    consumedLength,\n    releasePrevious,\n    releaseSelf,\n    repeat\n  } = (_state$repeatKey = state.repeatKey) != null ? _state$repeatKey : (0, _getNextKeyDef.getNextKeyDef)(text, options);\n  const replace = applyPlugins(plugins.replaceBehavior, keyDef, getCurrentElement(), options, state);\n  if (!replace) {\n    const pressed = state.pressed.find(p => p.keyDef === keyDef); // Release the key automatically if it was pressed before.\n    // Do not release the key on iterations on `state.repeatKey`.\n\n    if (pressed && !state.repeatKey) {\n      keyup(keyDef, getCurrentElement, options, state, pressed.unpreventedDefault);\n    }\n    if (!releasePrevious) {\n      const unpreventedDefault = keydown(keyDef, getCurrentElement, options, state);\n      if (unpreventedDefault && hasKeyPress(keyDef, state)) {\n        keypress(keyDef, getCurrentElement, options, state);\n      } // Release the key only on the last iteration on `state.repeatKey`.\n\n      if (releaseSelf && repeat <= 1) {\n        keyup(keyDef, getCurrentElement, options, state, unpreventedDefault);\n      }\n    }\n  }\n  if (repeat > 1) {\n    state.repeatKey = {\n      // don't consume again on the next iteration\n      consumedLength: 0,\n      keyDef,\n      releasePrevious,\n      releaseSelf,\n      repeat: repeat - 1\n    };\n  } else {\n    delete state.repeatKey;\n  }\n  if (text.length > consumedLength || repeat > 1) {\n    if (options.delay > 0) {\n      await (0, _utils.wait)(options.delay);\n    }\n    return keyboardImplementation(text.slice(consumedLength), options, state);\n  }\n  return void undefined;\n}\nfunction getActive(document) {\n  var _getActiveElement;\n  return (_getActiveElement = (0, _utils.getActiveElement)(document)) != null ? _getActiveElement : /* istanbul ignore next */\n  document.body;\n}\nfunction releaseAllKeys(options, state) {\n  const getCurrentElement = () => getActive(options.document);\n  for (const k of state.pressed) {\n    keyup(k.keyDef, getCurrentElement, options, state, k.unpreventedDefault);\n  }\n}\nfunction keydown(keyDef, getCurrentElement, options, state) {\n  const element = getCurrentElement(); // clear carried characters when focus is moved\n\n  if (element !== state.activeElement) {\n    state.carryValue = undefined;\n    state.carryChar = '';\n  }\n  state.activeElement = element;\n  applyPlugins(plugins.preKeydownBehavior, keyDef, element, options, state);\n  const unpreventedDefault = _dom.fireEvent.keyDown(element, (0, _getEventProps.getKeyEventProps)(keyDef, state));\n  state.pressed.push({\n    keyDef,\n    unpreventedDefault\n  });\n  if (unpreventedDefault) {\n    // all default behavior like keypress/submit etc is applied to the currentElement\n    applyPlugins(plugins.keydownBehavior, keyDef, getCurrentElement(), options, state);\n  }\n  return unpreventedDefault;\n}\nfunction keypress(keyDef, getCurrentElement, options, state) {\n  const element = getCurrentElement();\n  const unpreventedDefault = _dom.fireEvent.keyPress(element, (0, _getEventProps.getKeyEventProps)(keyDef, state));\n  if (unpreventedDefault) {\n    applyPlugins(plugins.keypressBehavior, keyDef, getCurrentElement(), options, state);\n  }\n}\nfunction keyup(keyDef, getCurrentElement, options, state, unprevented) {\n  const element = getCurrentElement();\n  applyPlugins(plugins.preKeyupBehavior, keyDef, element, options, state);\n  const unpreventedDefault = _dom.fireEvent.keyUp(element, (0, _getEventProps.getKeyEventProps)(keyDef, state));\n  if (unprevented && unpreventedDefault) {\n    applyPlugins(plugins.keyupBehavior, keyDef, getCurrentElement(), options, state);\n  }\n  state.pressed = state.pressed.filter(k => k.keyDef !== keyDef);\n  applyPlugins(plugins.postKeyupBehavior, keyDef, element, options, state);\n}\nfunction applyPlugins(pluginCollection, keyDef, element, options, state) {\n  const plugin = pluginCollection.find(p => p.matches(keyDef, element, options, state));\n  if (plugin) {\n    plugin.handle(keyDef, element, options, state);\n  }\n  return !!plugin;\n}\nfunction hasKeyPress(keyDef, state) {\n  var _keyDef$key;\n  return (((_keyDef$key = keyDef.key) == null ? void 0 : _keyDef$key.length) === 1 || keyDef.key === 'Enter') && !state.modifiers.ctrl && !state.modifiers.alt;\n}","map":null,"metadata":{},"sourceType":"script"}