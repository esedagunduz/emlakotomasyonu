{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateNewValue = calculateNewValue;\nvar _selectionRange = require(\"./selectionRange\");\nvar _getValue2 = require(\"./getValue\");\nvar _isValidDateValue = require(\"./isValidDateValue\");\nvar _isValidInputTimeValue = require(\"./isValidInputTimeValue\");\nfunction calculateNewValue(newEntry, element, value = (() => {\n  var _getValue;\n  return (_getValue = (0, _getValue2.getValue)(element)) != null ? _getValue : /* istanbul ignore next */\n  '';\n})(), selectionRange = (0, _selectionRange.getSelectionRange)(element), deleteContent) {\n  const selectionStart = selectionRange.selectionStart === null ? value.length : selectionRange.selectionStart;\n  const selectionEnd = selectionRange.selectionEnd === null ? value.length : selectionRange.selectionEnd;\n  const prologEnd = Math.max(0, selectionStart === selectionEnd && deleteContent === 'backward' ? selectionStart - 1 : selectionStart);\n  const prolog = value.substring(0, prologEnd);\n  const epilogStart = Math.min(value.length, selectionStart === selectionEnd && deleteContent === 'forward' ? selectionEnd + 1 : selectionEnd);\n  const epilog = value.substring(epilogStart, value.length);\n  let newValue = `${prolog}${newEntry}${epilog}`;\n  const newSelectionStart = prologEnd + newEntry.length;\n  if (element.type === 'date' && !(0, _isValidDateValue.isValidDateValue)(element, newValue)) {\n    newValue = value;\n  }\n  if (element.type === 'time' && !(0, _isValidInputTimeValue.isValidInputTimeValue)(element, newValue)) {\n    if ((0, _isValidInputTimeValue.isValidInputTimeValue)(element, newEntry)) {\n      newValue = newEntry;\n    } else {\n      newValue = value;\n    }\n  }\n  return {\n    newValue,\n    newSelectionStart\n  };\n}","map":null,"metadata":{},"sourceType":"script"}